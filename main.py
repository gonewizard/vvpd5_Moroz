"""Practice_5_VVPD"""

from math import factorial


def McLaurin_cos_x(x, iterations):
    """
    Вычисляет приближенное значение функции косинуса (cos(x))
    через разложение Маклорена.

    Параметры:
    x (float): Значение переменной, для которой вычисляется косинус.
    iterations (int): Максимальное количество
     итераций для вычисления разложения ряда.

    Возвращаемое значение:
    float: Приближенное значение cos(x), вычисленное
    с использованием ряда Маклорена до указанного числа итераций
    или до тех пор, пока вклад в суммарное
    значение не станет менее заданной точности (1e-10).

    Пример:
    >>> McLaurin_cos_x(1, 10)
    0.5403023058795627
    """
    amount = 0
    for n in range(iterations):
        term = ((-1) ** n) * (x ** (2 * n)) / factorial(2 * n)
        if abs(term) < 1e-10:
            break
        amount += term
    return amount


def McLaurin_sh_x(x, iterations):
    """
    Вычисляет приближенное значение гиперболического синуса (sh(x))
    через разложение Маклорена.

    Параметры:
    x (float): Значение переменной, для которой
    вычисляется гиперболический синус.
    iterations (int): Максимальное количество итераций для
    вычисления разложения ряда.

    Возвращаемое значение:
    float: Приближенное значение sh(x), вычисленное с
    использованием ряда Маклорена до указанного числа итераций
    или до тех пор, пока вклад в суммарное
    значение не станет менее заданной точности (1e-10).

    Пример:
    >>> McLaurin_sh_x(1, 10)
    1.175201193643034
    """
    amount = 0
    for n in range(iterations):
        term = (x ** ((2 * n) + 1)) / factorial((2 * n) + 1)
        if abs(term) < 1e-10:
            break
        amount += term
    return amount


def McLaurin_ch_x(x, iterations):
    """
    Вычисляет приближенное значение гиперболического косинуса (ch(x))
    через разложение Маклорена.

    Параметры:
    x (float): Значение переменной, для которой
    вычисляется гиперболический косинус.
    iterations (int): Максимальное количество
    итераций для вычисления разложения ряда.

    Возвращаемое значение:
    float: Приближенное значение ch(x), вычисленное с
    использованием ряда Маклорена до указанного числа итераций
    или до тех пор, пока вклад в суммарное значение не
    станет менее заданной точности (1e-10).

    Пример:
    >>> McLaurin_ch_x(1, 10)
    1.5430806348037251
    """
    amount = 0
    for n in range(iterations):
        term = (x ** (2 * n)) / factorial(2 * n)
        if abs(term) < 1e-10:
            break
        amount += term
    return amount


def main_menu():
    """
    Основное меню программы, позволяющее пользователю
    выбрать одну из доступных опций:
    1. Найти значение cos(x).
    2. Найти значение sh(x).
    3. Найти значение ch(x).
    4. Выйти из программы.

    Меню позволяет вводить значения для переменной x и
    отображать результат вычислений.
    В случае ввода некорректных данных программа повторно
    запрашивает ввод до получения правильных значений.
    """
    while True:
        print("\nМеню:")
        print("1. Найти значение cos(x)")
        print("2. Найти значение sh(x)")
        print("3. Найти значение ch(x)")
        print("4. Выйти из программы")

        choice = input("Введите действие (1-4): ")

        match choice:
            case "1":
                while True:
                    try:
                        x = float(input("Введите действительное x: "))
                        iterations = 100
                        print(McLaurin_cos_x(x, iterations))
                    except ValueError:
                        print("Введите корректное значение x!")
                        continue
                    break
            case "2":
                while True:
                    try:
                        x = float(input("Введите действительное x: "))
                        iterations = 100
                        print(McLaurin_sh_x(x, iterations))
                    except ValueError:
                        print("Введите корректное значение х.")
                        continue
                    break
            case "3":
                while True:
                    try:
                        x = float(input("Введите действительное x: "))
                        iterations = 100
                        print(McLaurin_ch_x(x, iterations))
                    except ValueError:
                        print("Введите корректное значение x!")
                        continue
                    break
            case "4":
                print("Выход из программы.")
                break
            case _:
                print("Введите корректное действие!")


main_menu()
